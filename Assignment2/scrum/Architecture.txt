# Please discuss your architectural decisions below.

High Level Architecture:

	MVC
	To keep the code simple, a partial MVC was implemented.
	
	Model
	The Model captures enough information to re-draw the sketch of
	the user.
	
	View+Controller
	There is a View class as well as a few, what we call, view components.
	The View class captures the Stage as well
	as containing all of its components.
	View components are meant to be contained in the main View.
	Examples of view components are PaintPanel and ShapeChooserPanel.
	
	The View class, and view components all implements their own controller.
	For example, the PaintPanel listens to its own MouseEvents.
	This is instead of separating out the Controller from the View. This choice
	was made to simplify the code, yet still keep it modular and clear.
	
	Each view component can see the containing View as well as the Model
	as appropriate. This means that each view component can speak to the
	other view components. An example of this is when the ShapeChooserPanel
	buttons are clicked, resulting in a mode change in the PaintPanel.
	
---------------------------------------------------------------------
TODO!!! Add in more architecture and discussion. For example, 
do you do something interesting to fix the association between the 
ShapeChooser and the PaintPanel? How about the PaintModel, something
is clearly wrong with it. Can you come up with a better architecture?
---------------------------------------------------------------------

DESIGN PATTERNS USED
	TODO!!! If you introduce a Design Pattern to solve a problem, 
	discuss it below. Only add design patterns if they simplify and improve
	the code. I see at least two that would greatly improve code. 
		
	Strategy: We have two examples of the strategy pattern in place, firstly for handling shape creation
	and manipulation and secondly another for handling all other canvas manipulation. There two are swapped
	but inherit from different super-classes inorder to not violate LSP.
	Command:
		Utilizing command design pattern with Drawable abstract class, which ensures every drawable object
		must have the draw() method. We also used this for the ClosedShape class which inherits and adds features
		to Drawable.
		We are also using the command design pattern to improve how we modify the graphics context before
		each stroke method, this ensures that the graphics context is only being changes from one file, and
		we can modify that code in a more modular format. 
	Singleton:
	Composite:
	Factory: We are using the Factory pattern to create strategies which are then placed in the PaintPanel.
			 The factory pattern is helpful since it allows us to isolate the creation of a strategy from one
			 location, giving us the freedom to continually add features. We are also using this pattern for
			 installing the TransformStrategies into the PaintPanel since they act in a similar way to the 
			 ShapeManipulatorStrategies.
	Builder:
	Observer/Observable:
			 We are using the observer/observable design pattern to manage the storage of "erased" chunks,
			 this ensures that we are updating the chunks as needed and lower the overhead runtime cost
			 of updating them every-time.
	
	... (any others you find useful) ...

OTHER ARCHITECTURE DISCUSSIONS
